#pragma once

/************************************************************************

Copyright (c) 2010, João Francisco Biondo Trinca
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright notice, 
this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright 
notice, this list of conditions and the following disclaimer in the 
documentation and/or other materials provided with the distribution.

* Neither the name of DarK TeaM Softwares nor the names of its 
contributors may be used to endorse or promote products derived from 
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.

************************************************************************/

/**
* Great thanks to Magnus Norddahl (ClanLib.org) for its amazing scheme
* for working with signals and slots
**/


/**************************************************************************
* Base callback class    
**************************************************************************/

/**
* Base callback class (necessary for invokes)
**/
class DelegateBase
{
protected:
	/// Is it valid?
	bool _valid;
	/// Is it enabled?
	bool _enabled;

public:
	/**
	* Initializes the callback flags
	**/
	DelegateBase() 
		: _valid ( true ), _enabled ( true ) 
	{ 
		return; 
	}

	/**
	* Destroys the callback
	**/
	virtual ~DelegateBase() 
	{ 
		return; 
	}

	/**
	* Checks if the callback is valid
	**/
	bool isValid() { return this->_valid; }

	/**
	* Sets the actual validity
	**/
	void setValid(bool value) { this->_valid = value; }

	/**
	* Checks if the callback is enabled
	**/
	bool isEnabled() { return this->_valid; }

	/**
	* Sets the actual enabled flag for the current callback
	**/
	void setEnabled(bool value) { this->_valid = value; }

};

//// ######## GENERATED BY SCRIPT - START ######## ////

/**************************************************************************
* Delegate handler for functions with 0 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/

class Delegate_v0_Generic : public DelegateBase
{
public:
	virtual void invoke (  ) = 0;
};

/**
* Handler for static functions with 0 arguments
**/

class Delegate_v0_StaticCall : public Delegate_v0_Generic 
{
public:
	Delegate_v0_StaticCall ( void(*ufunc)() ) : function(ufunc) { return; }
	void invoke () { this->function(); }
	void (*function)();
};

/**
* Handler for static functions with 0 arguments and a user data
**/
template<class Data>
class Delegate_v0_StaticUserCall : public Delegate_v0_Generic 
{
public:
	Delegate_v0_StaticUserCall ( void(*ufunc)(Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke () { this->function(this->data); }
	void (*function)(Data);
	Data data;
};

/**
* Handler for a class member function with 0 arguments
**/
template<class Class>
class Delegate_v0_MemberCall : public Delegate_v0_Generic 
{
public:
	Delegate_v0_MemberCall ( Class* uinst, void(Class::*ufunc)() ) : function(ufunc), instance(uinst) { return; }
	void invoke () { (this->instance->*function)(); }
	void (Class::*function)();
	Class* instance;
};

/**
* Handler for a class member function with 0 arguments and a user data
**/
template<class Class, class Data>
class Delegate_v0_MemberUserCall : public Delegate_v0_Generic 
{
public:
	Delegate_v0_MemberUserCall ( Class* uinst, void(Class::*ufunc)(Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke () { (this->instance->*function)(this->data); }
	void (Class::*function)(Data);
	Class* instance;
	Data data;
};

/**************************************************************************
* Delegate handler for functions with 1 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/
template<class A1>
class Delegate_v1_Generic : public DelegateBase
{
public:
	virtual void invoke ( A1 a1 ) = 0;
};

/**
* Handler for static functions with 1 arguments
**/
template<class A1>
class Delegate_v1_StaticCall : public Delegate_v1_Generic <A1>
{
public:
	Delegate_v1_StaticCall ( void(*ufunc)(A1) ) : function(ufunc) { return; }
	void invoke (A1 a1) { this->function(a1); }
	void (*function)(A1);
};

/**
* Handler for static functions with 1 arguments and a user data
**/
template<class A1, class Data>
class Delegate_v1_StaticUserCall : public Delegate_v1_Generic <A1>
{
public:
	Delegate_v1_StaticUserCall ( void(*ufunc)(A1, Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke (A1 a1) { this->function(a1, this->data); }
	void (*function)(A1, Data);
	Data data;
};

/**
* Handler for a class member function with 1 arguments
**/
template<class Class, class A1>
class Delegate_v1_MemberCall : public Delegate_v1_Generic <A1>
{
public:
	Delegate_v1_MemberCall ( Class* uinst, void(Class::*ufunc)(A1) ) : function(ufunc), instance(uinst) { return; }
	void invoke (A1 a1) { (this->instance->*function)(a1); }
	void (Class::*function)(A1);
	Class* instance;
};

/**
* Handler for a class member function with 1 arguments and a user data
**/
template<class Class, class A1, class Data>
class Delegate_v1_MemberUserCall : public Delegate_v1_Generic <A1>
{
public:
	Delegate_v1_MemberUserCall ( Class* uinst, void(Class::*ufunc)(A1, Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke (A1 a1) { (this->instance->*function)(a1, this->data); }
	void (Class::*function)(A1, Data);
	Class* instance;
	Data data;
};

/**************************************************************************
* Delegate handler for functions with 2 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/
template<class A1, class A2>
class Delegate_v2_Generic : public DelegateBase
{
public:
	virtual void invoke ( A1 a1, A2 a2 ) = 0;
};

/**
* Handler for static functions with 2 arguments
**/
template<class A1, class A2>
class Delegate_v2_StaticCall : public Delegate_v2_Generic <A1, A2>
{
public:
	Delegate_v2_StaticCall ( void(*ufunc)(A1, A2) ) : function(ufunc) { return; }
	void invoke (A1 a1, A2 a2) { this->function(a1, a2); }
	void (*function)(A1, A2);
};

/**
* Handler for static functions with 2 arguments and a user data
**/
template<class A1, class A2, class Data>
class Delegate_v2_StaticUserCall : public Delegate_v2_Generic <A1, A2>
{
public:
	Delegate_v2_StaticUserCall ( void(*ufunc)(A1, A2, Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke (A1 a1, A2 a2) { this->function(a1, a2, this->data); }
	void (*function)(A1, A2, Data);
	Data data;
};

/**
* Handler for a class member function with 2 arguments
**/
template<class Class, class A1, class A2>
class Delegate_v2_MemberCall : public Delegate_v2_Generic <A1, A2>
{
public:
	Delegate_v2_MemberCall ( Class* uinst, void(Class::*ufunc)(A1, A2) ) : function(ufunc), instance(uinst) { return; }
	void invoke (A1 a1, A2 a2) { (this->instance->*function)(a1, a2); }
	void (Class::*function)(A1, A2);
	Class* instance;
};

/**
* Handler for a class member function with 2 arguments and a user data
**/
template<class Class, class A1, class A2, class Data>
class Delegate_v2_MemberUserCall : public Delegate_v2_Generic <A1, A2>
{
public:
	Delegate_v2_MemberUserCall ( Class* uinst, void(Class::*ufunc)(A1, A2, Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke (A1 a1, A2 a2) { (this->instance->*function)(a1, a2, this->data); }
	void (Class::*function)(A1, A2, Data);
	Class* instance;
	Data data;
};

/**************************************************************************
* Delegate handler for functions with 3 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/
template<class A1, class A2, class A3>
class Delegate_v3_Generic : public DelegateBase
{
public:
	virtual void invoke ( A1 a1, A2 a2, A3 a3 ) = 0;
};

/**
* Handler for static functions with 3 arguments
**/
template<class A1, class A2, class A3>
class Delegate_v3_StaticCall : public Delegate_v3_Generic <A1, A2, A3>
{
public:
	Delegate_v3_StaticCall ( void(*ufunc)(A1, A2, A3) ) : function(ufunc) { return; }
	void invoke (A1 a1, A2 a2, A3 a3) { this->function(a1, a2, a3); }
	void (*function)(A1, A2, A3);
};

/**
* Handler for static functions with 3 arguments and a user data
**/
template<class A1, class A2, class A3, class Data>
class Delegate_v3_StaticUserCall : public Delegate_v3_Generic <A1, A2, A3>
{
public:
	Delegate_v3_StaticUserCall ( void(*ufunc)(A1, A2, A3, Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3) { this->function(a1, a2, a3, this->data); }
	void (*function)(A1, A2, A3, Data);
	Data data;
};

/**
* Handler for a class member function with 3 arguments
**/
template<class Class, class A1, class A2, class A3>
class Delegate_v3_MemberCall : public Delegate_v3_Generic <A1, A2, A3>
{
public:
	Delegate_v3_MemberCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3) ) : function(ufunc), instance(uinst) { return; }
	void invoke (A1 a1, A2 a2, A3 a3) { (this->instance->*function)(a1, a2, a3); }
	void (Class::*function)(A1, A2, A3);
	Class* instance;
};

/**
* Handler for a class member function with 3 arguments and a user data
**/
template<class Class, class A1, class A2, class A3, class Data>
class Delegate_v3_MemberUserCall : public Delegate_v3_Generic <A1, A2, A3>
{
public:
	Delegate_v3_MemberUserCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3) { (this->instance->*function)(a1, a2, a3, this->data); }
	void (Class::*function)(A1, A2, A3, Data);
	Class* instance;
	Data data;
};

/**************************************************************************
* Delegate handler for functions with 4 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/
template<class A1, class A2, class A3, class A4>
class Delegate_v4_Generic : public DelegateBase
{
public:
	virtual void invoke ( A1 a1, A2 a2, A3 a3, A4 a4 ) = 0;
};

/**
* Handler for static functions with 4 arguments
**/
template<class A1, class A2, class A3, class A4>
class Delegate_v4_StaticCall : public Delegate_v4_Generic <A1, A2, A3, A4>
{
public:
	Delegate_v4_StaticCall ( void(*ufunc)(A1, A2, A3, A4) ) : function(ufunc) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4) { this->function(a1, a2, a3, a4); }
	void (*function)(A1, A2, A3, A4);
};

/**
* Handler for static functions with 4 arguments and a user data
**/
template<class A1, class A2, class A3, class A4, class Data>
class Delegate_v4_StaticUserCall : public Delegate_v4_Generic <A1, A2, A3, A4>
{
public:
	Delegate_v4_StaticUserCall ( void(*ufunc)(A1, A2, A3, A4, Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4) { this->function(a1, a2, a3, a4, this->data); }
	void (*function)(A1, A2, A3, A4, Data);
	Data data;
};

/**
* Handler for a class member function with 4 arguments
**/
template<class Class, class A1, class A2, class A3, class A4>
class Delegate_v4_MemberCall : public Delegate_v4_Generic <A1, A2, A3, A4>
{
public:
	Delegate_v4_MemberCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4) ) : function(ufunc), instance(uinst) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4) { (this->instance->*function)(a1, a2, a3, a4); }
	void (Class::*function)(A1, A2, A3, A4);
	Class* instance;
};

/**
* Handler for a class member function with 4 arguments and a user data
**/
template<class Class, class A1, class A2, class A3, class A4, class Data>
class Delegate_v4_MemberUserCall : public Delegate_v4_Generic <A1, A2, A3, A4>
{
public:
	Delegate_v4_MemberUserCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4) { (this->instance->*function)(a1, a2, a3, a4, this->data); }
	void (Class::*function)(A1, A2, A3, A4, Data);
	Class* instance;
	Data data;
};

/**************************************************************************
* Delegate handler for functions with 5 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/
template<class A1, class A2, class A3, class A4, class A5>
class Delegate_v5_Generic : public DelegateBase
{
public:
	virtual void invoke ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5 ) = 0;
};

/**
* Handler for static functions with 5 arguments
**/
template<class A1, class A2, class A3, class A4, class A5>
class Delegate_v5_StaticCall : public Delegate_v5_Generic <A1, A2, A3, A4, A5>
{
public:
	Delegate_v5_StaticCall ( void(*ufunc)(A1, A2, A3, A4, A5) ) : function(ufunc) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) { this->function(a1, a2, a3, a4, a5); }
	void (*function)(A1, A2, A3, A4, A5);
};

/**
* Handler for static functions with 5 arguments and a user data
**/
template<class A1, class A2, class A3, class A4, class A5, class Data>
class Delegate_v5_StaticUserCall : public Delegate_v5_Generic <A1, A2, A3, A4, A5>
{
public:
	Delegate_v5_StaticUserCall ( void(*ufunc)(A1, A2, A3, A4, A5, Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) { this->function(a1, a2, a3, a4, a5, this->data); }
	void (*function)(A1, A2, A3, A4, A5, Data);
	Data data;
};

/**
* Handler for a class member function with 5 arguments
**/
template<class Class, class A1, class A2, class A3, class A4, class A5>
class Delegate_v5_MemberCall : public Delegate_v5_Generic <A1, A2, A3, A4, A5>
{
public:
	Delegate_v5_MemberCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, A5) ) : function(ufunc), instance(uinst) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) { (this->instance->*function)(a1, a2, a3, a4, a5); }
	void (Class::*function)(A1, A2, A3, A4, A5);
	Class* instance;
};

/**
* Handler for a class member function with 5 arguments and a user data
**/
template<class Class, class A1, class A2, class A3, class A4, class A5, class Data>
class Delegate_v5_MemberUserCall : public Delegate_v5_Generic <A1, A2, A3, A4, A5>
{
public:
	Delegate_v5_MemberUserCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, A5, Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) { (this->instance->*function)(a1, a2, a3, a4, a5, this->data); }
	void (Class::*function)(A1, A2, A3, A4, A5, Data);
	Class* instance;
	Data data;
};

/**************************************************************************
* Delegate handler for functions with 6 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/
template<class A1, class A2, class A3, class A4, class A5, class A6>
class Delegate_v6_Generic : public DelegateBase
{
public:
	virtual void invoke ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6 ) = 0;
};

/**
* Handler for static functions with 6 arguments
**/
template<class A1, class A2, class A3, class A4, class A5, class A6>
class Delegate_v6_StaticCall : public Delegate_v6_Generic <A1, A2, A3, A4, A5, A6>
{
public:
	Delegate_v6_StaticCall ( void(*ufunc)(A1, A2, A3, A4, A5, A6) ) : function(ufunc) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) { this->function(a1, a2, a3, a4, a5, a6); }
	void (*function)(A1, A2, A3, A4, A5, A6);
};

/**
* Handler for static functions with 6 arguments and a user data
**/
template<class A1, class A2, class A3, class A4, class A5, class A6, class Data>
class Delegate_v6_StaticUserCall : public Delegate_v6_Generic <A1, A2, A3, A4, A5, A6>
{
public:
	Delegate_v6_StaticUserCall ( void(*ufunc)(A1, A2, A3, A4, A5, A6, Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) { this->function(a1, a2, a3, a4, a5, a6, this->data); }
	void (*function)(A1, A2, A3, A4, A5, A6, Data);
	Data data;
};

/**
* Handler for a class member function with 6 arguments
**/
template<class Class, class A1, class A2, class A3, class A4, class A5, class A6>
class Delegate_v6_MemberCall : public Delegate_v6_Generic <A1, A2, A3, A4, A5, A6>
{
public:
	Delegate_v6_MemberCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, A5, A6) ) : function(ufunc), instance(uinst) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) { (this->instance->*function)(a1, a2, a3, a4, a5, a6); }
	void (Class::*function)(A1, A2, A3, A4, A5, A6);
	Class* instance;
};

/**
* Handler for a class member function with 6 arguments and a user data
**/
template<class Class, class A1, class A2, class A3, class A4, class A5, class A6, class Data>
class Delegate_v6_MemberUserCall : public Delegate_v6_Generic <A1, A2, A3, A4, A5, A6>
{
public:
	Delegate_v6_MemberUserCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, A5, A6, Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) { (this->instance->*function)(a1, a2, a3, a4, a5, a6, this->data); }
	void (Class::*function)(A1, A2, A3, A4, A5, A6, Data);
	Class* instance;
	Data data;
};

/**************************************************************************
* Delegate handler for functions with 7 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/
template<class A1, class A2, class A3, class A4, class A5, class A6, class A7>
class Delegate_v7_Generic : public DelegateBase
{
public:
	virtual void invoke ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7 ) = 0;
};

/**
* Handler for static functions with 7 arguments
**/
template<class A1, class A2, class A3, class A4, class A5, class A6, class A7>
class Delegate_v7_StaticCall : public Delegate_v7_Generic <A1, A2, A3, A4, A5, A6, A7>
{
public:
	Delegate_v7_StaticCall ( void(*ufunc)(A1, A2, A3, A4, A5, A6, A7) ) : function(ufunc) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) { this->function(a1, a2, a3, a4, a5, a6, a7); }
	void (*function)(A1, A2, A3, A4, A5, A6, A7);
};

/**
* Handler for static functions with 7 arguments and a user data
**/
template<class A1, class A2, class A3, class A4, class A5, class A6, class A7, class Data>
class Delegate_v7_StaticUserCall : public Delegate_v7_Generic <A1, A2, A3, A4, A5, A6, A7>
{
public:
	Delegate_v7_StaticUserCall ( void(*ufunc)(A1, A2, A3, A4, A5, A6, A7, Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) { this->function(a1, a2, a3, a4, a5, a6, a7, this->data); }
	void (*function)(A1, A2, A3, A4, A5, A6, A7, Data);
	Data data;
};

/**
* Handler for a class member function with 7 arguments
**/
template<class Class, class A1, class A2, class A3, class A4, class A5, class A6, class A7>
class Delegate_v7_MemberCall : public Delegate_v7_Generic <A1, A2, A3, A4, A5, A6, A7>
{
public:
	Delegate_v7_MemberCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, A5, A6, A7) ) : function(ufunc), instance(uinst) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) { (this->instance->*function)(a1, a2, a3, a4, a5, a6, a7); }
	void (Class::*function)(A1, A2, A3, A4, A5, A6, A7);
	Class* instance;
};

/**
* Handler for a class member function with 7 arguments and a user data
**/
template<class Class, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class Data>
class Delegate_v7_MemberUserCall : public Delegate_v7_Generic <A1, A2, A3, A4, A5, A6, A7>
{
public:
	Delegate_v7_MemberUserCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, A5, A6, A7, Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) { (this->instance->*function)(a1, a2, a3, a4, a5, a6, a7, this->data); }
	void (Class::*function)(A1, A2, A3, A4, A5, A6, A7, Data);
	Class* instance;
	Data data;
};

/**************************************************************************
* Delegate handler for functions with 8 arguments          
**************************************************************************/

/**
* Base Delegate class (necessary for invokes)
**/
template<class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8>
class Delegate_v8_Generic : public DelegateBase
{
public:
	virtual void invoke ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8 ) = 0;
};

/**
* Handler for static functions with 8 arguments
**/
template<class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8>
class Delegate_v8_StaticCall : public Delegate_v8_Generic <A1, A2, A3, A4, A5, A6, A7, A8>
{
public:
	Delegate_v8_StaticCall ( void(*ufunc)(A1, A2, A3, A4, A5, A6, A7, A8) ) : function(ufunc) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) { this->function(a1, a2, a3, a4, a5, a6, a7, a8); }
	void (*function)(A1, A2, A3, A4, A5, A6, A7, A8);
};

/**
* Handler for static functions with 8 arguments and a user data
**/
template<class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8, class Data>
class Delegate_v8_StaticUserCall : public Delegate_v8_Generic <A1, A2, A3, A4, A5, A6, A7, A8>
{
public:
	Delegate_v8_StaticUserCall ( void(*ufunc)(A1, A2, A3, A4, A5, A6, A7, A8, Data), const Data& udata ) : function(ufunc), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) { this->function(a1, a2, a3, a4, a5, a6, a7, a8, this->data); }
	void (*function)(A1, A2, A3, A4, A5, A6, A7, A8, Data);
	Data data;
};

/**
* Handler for a class member function with 8 arguments
**/
template<class Class, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8>
class Delegate_v8_MemberCall : public Delegate_v8_Generic <A1, A2, A3, A4, A5, A6, A7, A8>
{
public:
	Delegate_v8_MemberCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, A5, A6, A7, A8) ) : function(ufunc), instance(uinst) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) { (this->instance->*function)(a1, a2, a3, a4, a5, a6, a7, a8); }
	void (Class::*function)(A1, A2, A3, A4, A5, A6, A7, A8);
	Class* instance;
};

/**
* Handler for a class member function with 8 arguments and a user data
**/
template<class Class, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8, class Data>
class Delegate_v8_MemberUserCall : public Delegate_v8_Generic <A1, A2, A3, A4, A5, A6, A7, A8>
{
public:
	Delegate_v8_MemberUserCall ( Class* uinst, void(Class::*ufunc)(A1, A2, A3, A4, A5, A6, A7, A8, Data), const Data& udata ) : function(ufunc), instance(uinst), data(udata) { return; }
	void invoke (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8) { (this->instance->*function)(a1, a2, a3, a4, a5, a6, a7, a8, this->data); }
	void (Class::*function)(A1, A2, A3, A4, A5, A6, A7, A8, Data);
	Class* instance;
	Data data;
};

//// ######## GENERATED BY SCRIPT - FINISH ######## ////

